package strategy

import (
	"testing"
)

//建造者模式，将一个复杂对象的构造与它的表示分离，使得同样的构造过程可以创建不同的表示。
//1、优点：使用建造者模式可以使客户端不用知道产品内部的实现细节；
//		  具体的建造者类之间是相互独立的，对系统的扩展非常有利；
//		  由于具体的建造者是独立的，因此可以对建造过程逐步细化，而不对其他的模块产生任何影响。
//2、缺点：建造者模式所创建的产品一般都是具有较多的共同点，其组成部分相似，如果产品之间差异较大，则不适用，因此其使用范围受到一定的限制；
//		  如果产品内部变化复杂，可能会导致需要定义很多的具体建造者类来实现，会导致系统变得很庞大。
//3、使用场景：需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性；
//			 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品
func Test_main(t *testing.T) {
	thin := Thin{}
	thinBuilder := Builder{Person: &thin}
	thinBuilder.CreatePerson()

	fat := Fat{}
	fatBuilder := Builder{Person: &fat}
	fatBuilder.CreatePerson()
}
