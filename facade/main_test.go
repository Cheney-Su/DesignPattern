package strategy

import (
	"testing"
)

//外观模式，为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得子系统更加容易使用。
//1、优点：实现了子系统和客户端之间的松耦合；
//		  客户端屏蔽了子系统组件，减少了客户端所需处理的对象数目，并使子系统使用起来更加容易
//2、缺点：增加新的子系统可能要修改外观类或客户端的代码，违背了开闭原则。
//3、使用场景：当要为一个复杂子系统提供一个简单接口时可以使用外观模式；
//			 客户端与多个子系统之间存在很大的依赖性，引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。
func Test_main(t *testing.T) {
	fund := NewFund()
	fund.BuyFund()
	fund.SellFund()
}
